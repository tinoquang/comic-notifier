// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapURL *string `json:"chapURL,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// URL to comic's avatar
	ImgURL *string `json:"imgURL,omitempty"`

	// Comic's latest chapter
	LatestChap *string `json:"latestChap,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// ComicPage defines model for ComicPage.
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// User defines model for User.
type User struct {

	// App scope ID
	Appid *string `json:"appid,omitempty"`

	// Number of comics subscribed
	Comics *int `json:"comics,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// User avatar link
	ProfilePic *string `json:"profile_pic,omitempty"`

	// Page scope ID
	Psid *string `json:"psid,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error

	// (GET /users)
	Users(ctx echo.Context) error

	// (GET /users/{id})
	GetUser(ctx echo.Context, id string) error

	// (GET /users/{id}/comics)
	GetUserComics(ctx echo.Context, id string) error

	// (POST /users/{id}/comics)
	SubscribeComic(ctx echo.Context, id string) error

	// (DELETE /users/{user_id}/comics/{id})
	UnsubscribeComic(ctx echo.Context, userId string, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// GetUserComics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserComics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserComics(ctx, id)
	return err
}

// SubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) SubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubscribeComic(ctx, id)
	return err
}

// UnsubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) UnsubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsubscribeComic(ctx, userId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/comics", wrapper.Comics)
	router.GET("/comics/:id", wrapper.GetComic)
	router.GET("/users", wrapper.Users)
	router.GET("/users/:id", wrapper.GetUser)
	router.GET("/users/:id/comics", wrapper.GetUserComics)
	router.POST("/users/:id/comics", wrapper.SubscribeComic)
	router.DELETE("/users/:user_id/comics/:id", wrapper.UnsubscribeComic)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXUW/bNhD+KwQ3oC9y5DQd1vmty7DCQDAEyfw0GAUtnSV2EsmSpyReoP8+HCVLtkw5",
	"rrNiw57CUDze3fd9/Eg/80SXRitQ6Pjsmbskh1L44bUuZUIDY7UBixL8dJILs7i7oWEKLrHSoNSKz/h1",
	"LgyCZZUteMRxY4DPuEMrVcbriMs0EEIp2PyXfr1UCBlYH1BmwTyLuxuGmiUU+8Yx8SBQ2FDGQiA4pLJG",
	"Mr9xrFnDkqb20C5KlDBWuf8WiDEiC8TcigyocgsibcoPxRJ8I+mCyNbdjF59hgRpD7/8NljEjaR2/XYW",
	"nNHKUQcDiumzH0mE0g++t7DmM/5d3MslbrUSN0Lp6xDWio0vzMKXSlpI+eyP7abLOuILB/ZQWMKYkEY+",
	"GMNcog3s6aTHqy92P+63qlyBZXrddOuYq1b0fQVpUG5n8Wz1WhbwyTQHZaBTB7ZVJyuk+jO4gQu17IUy",
	"3vMh4zQl1VoH0Luds7W2jPpQcr0hpeNKI+0qsYC2Rf/pw+2cR/wBrGtiLy+mVKM2oISRfMavLqYXV6QW",
	"gblHPO7BzwAPs98BVlaxgjTXEcH9llbQmnm6xZimt4L0G76dThstKgSFrUAKmfi4+LOjBFu/+jqp+oNx",
	"KNc6GlR/XyUJOLeuimLDbNOKGDbj2RCZ6yTOlzTVIhM/y7R+CZ5WnyvhIGVaNZzvQ/QR8Lo1DCOsKAHB",
	"Usojhirpf2KKb7VNFtydST5DW0G0A+DwSNTLVzJygmccgv6rrlTrjuxRYk7N1BF/N303cjgdSzU4pjQy",
	"eJIOxympnAftNK02i4c8LNrZb69U75GvFmnTxS4gNLOLx0kKPQ7KR0Bf7bfXZueAy/8dBWdZKXvMZZL7",
	"FDvXG0M9xlFntUeZ8jfXKUSl/xGmxl4gZ1n6OKhjPuTxIgNak3kF/SfiRjscCe2y0OtQwWP3ONzn8H67",
	"7KSr4B8n8UsFDn/W6WbAH8ITxqYQcsAcPInS+BdGjmjcLI5XACq7UIAx2moDaoJWqHyiVSEVxKjlBHOh",
	"skkizKTUOCmlyifOvZ1cXf340zTwEDrgt/EY/9qq/43ba09fe+JhomXVi+hyRAmVEhXm2sq/ID1ZbhH/",
	"oeltf9lcIVglCgbWanv8Voyf6c+n3oe6ayGFAjDwMF6oXrVhue6seL1g2/K+SrXR+TdQev7z6AWYWB9z",
	"9Fnzgp/QnAP7sIXS/2rsDlqhE1Hk2uHs/fT9NBZGxg+XfCjWG1rFfqffv/d+K14v678DAAD//z4hc0IR",
	"EAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
