// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapUrl *string `json:"chap-url,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// Comic's latest chapter
	Latest *string `json:"latest,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// ComicPage defines model for ComicPage.
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// User defines model for User.
type User struct {

	// App scope ID
	Appid *string `json:"appid,omitempty"`

	// Number of comics subscribed
	Comics *int `json:"comics,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// User avatar link
	ProfilePic *string `json:"profile_pic,omitempty"`

	// Page scope ID
	Psid *string `json:"psid,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error

	// (GET /users)
	Users(ctx echo.Context) error

	// (GET /users/{id})
	GetUser(ctx echo.Context, id string) error

	// (GET /users/{id}/comics)
	GetUserComics(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// GetUserComics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserComics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserComics(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/comics", wrapper.Comics)
	router.GET("/comics/:id", wrapper.GetComic)
	router.GET("/users", wrapper.Users)
	router.GET("/users/:id", wrapper.GetUser)
	router.GET("/users/:id/comics", wrapper.GetUserComics)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWXWvbMBT9K0Ib7MWr07UPxW+lYyVQRljXpxGGIl/H6mxJk67TheL/Pq7sfMtd1lIY",
	"e1Mk3a9zjk78yKWprdGg0fPskXtZQi3C8srUStLCOmPBoYKwLUth3zeuonUOXjplURnNM35VCovgGB0m",
	"HJcWeMY9OqXnvE24yiMhVIONP27uK40wB0cBlUDwOBD0zrPunMmubKykFjUMFQ1nkRgr5pGYiZgDQ8Mc",
	"iJzJgEwkNg5LKBcFpV3vmNk9SKQc4fok2sSNonFDOgfeGu1pgj166DisFEIdFm8dFDzjb9IN1WnPc9qR",
	"vOlDOCeWoTEHPxvlIOfZt1XSaZvwOw/uUBTC2hi9l9YyL42FHYo3eG2a3Y373NQzcMwU3bSe+WZG5zPI",
	"o0p5Fs/OFKqC77YT+W4oTcnEQqBwrFL6RzSBj40chDI88yHjtKV0YSLoTcasMI7RHFoVS1I6zgxSVoUV",
	"9COGo8vJmCd8Ac53sacnI+rRWNDCKp7xs5PRyRmpRWAZEE834M8h8sq+ADZOs4o0tyaCh5RO0J1xvsKY",
	"tleCDAk/jEadFjWCxl4glZIhLr33VGDlNX8n1fAwDuXaJnvd3zZSgvdFU1VL5rpRxP4wgQ0x92uJ8ylt",
	"9cikjypv/wRPr8+Z8JAzozvOdyG6BrzqDcMKJ2pAcFTyCS9U9JuY4ittk3uu3yTP0DWQbAG4/yTa6QsZ",
	"OcIzDkH/ZBrduyN7UFjSMG3Cz0fnA4/Ts9yAZ9ogg1/K4zAljQ+gHafV7vI+D3f97usrNXjki0XaTbEN",
	"CO1s43GUQp8G5RowdPv62lw74PS/o+BZVsoeSiXLUGLr742hGeJobbVPMhX+uY4hKv9HmBr6AnmWpQ+D",
	"OuRDAS8yoILMK+4/bcI9uMUK8PCVx0tE67M0rYwUVWk8Zheji1EqrEoXp3y/+Ru6xb7S9+ptSMXbafs7",
	"AAD//zCvPxx9CwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
