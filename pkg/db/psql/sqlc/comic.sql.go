// Code generated by sqlc. DO NOT EDIT.
// source: comic.sql

package db

import (
	"context"
	"database/sql"
)

const createComic = `-- name: CreateComic :one
INSERT INTO comics
	(page,
	name,
	url,
	img_url,
	cloud_img,
	latest_chap,
	chap_url)
	VALUES ($1,$2,$3,$4,$5,$6,$7)
	RETURNING id, page, name, url, img_url, cloud_img, latest_chap, chap_url
`

type CreateComicParams struct {
	Page       sql.NullString
	Name       sql.NullString
	Url        string
	ImgUrl     sql.NullString
	CloudImg   sql.NullString
	LatestChap string
	ChapUrl    string
}

func (q *Queries) CreateComic(ctx context.Context, arg CreateComicParams) (Comic, error) {
	row := q.db.QueryRowContext(ctx, createComic,
		arg.Page,
		arg.Name,
		arg.Url,
		arg.ImgUrl,
		arg.CloudImg,
		arg.LatestChap,
		arg.ChapUrl,
	)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Name,
		&i.Url,
		&i.ImgUrl,
		&i.CloudImg,
		&i.LatestChap,
		&i.ChapUrl,
	)
	return i, err
}

const deleteComic = `-- name: DeleteComic :exec
DELETE FROM comics
WHERE id = $1
`

func (q *Queries) DeleteComic(ctx context.Context, id sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteComic, id)
	return err
}

const getComic = `-- name: GetComic :one
SELECT id, page, name, url, img_url, cloud_img, latest_chap, chap_url FROM comics
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComic(ctx context.Context, id sql.NullInt32) (Comic, error) {
	row := q.db.QueryRowContext(ctx, getComic, id)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Name,
		&i.Url,
		&i.ImgUrl,
		&i.CloudImg,
		&i.LatestChap,
		&i.ChapUrl,
	)
	return i, err
}

const getComicByURL = `-- name: GetComicByURL :one
SELECT id, page, name, url, img_url, cloud_img, latest_chap, chap_url FROM comics
WHERE url = $1 LIMIT 1
`

func (q *Queries) GetComicByURL(ctx context.Context, url string) (Comic, error) {
	row := q.db.QueryRowContext(ctx, getComicByURL, url)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Name,
		&i.Url,
		&i.ImgUrl,
		&i.CloudImg,
		&i.LatestChap,
		&i.ChapUrl,
	)
	return i, err
}

const getComicForUpdate = `-- name: GetComicForUpdate :one
SELECT id, page, name, url, img_url, cloud_img, latest_chap, chap_url FROM comics
WHERE id = $1LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetComicForUpdate(ctx context.Context, id sql.NullInt32) (Comic, error) {
	row := q.db.QueryRowContext(ctx, getComicForUpdate, id)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Name,
		&i.Url,
		&i.ImgUrl,
		&i.CloudImg,
		&i.LatestChap,
		&i.ChapUrl,
	)
	return i, err
}

const listComics = `-- name: ListComics :many
SELECT id, page, name, url, img_url, cloud_img, latest_chap, chap_url FROM comics
WHERE comics.name ILIKE $1 or unaccent(comics.name) ILIKE $2
ORDER BY id DESC
LIMIT $3
OFFSET $4
`

type ListComicsParams struct {
	Name   sql.NullString
	Name_2 sql.NullString
	Limit  int32
	Offset int32
}

func (q *Queries) ListComics(ctx context.Context, arg ListComicsParams) ([]Comic, error) {
	rows, err := q.db.QueryContext(ctx, listComics,
		arg.Name,
		arg.Name_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comic{}
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Name,
			&i.Url,
			&i.ImgUrl,
			&i.CloudImg,
			&i.LatestChap,
			&i.ChapUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComic = `-- name: UpdateComic :one
UPDATE comics 
SET latest_chap=$2, chap_url=$3, img_url=$4, cloud_img=$5 
WHERE id=$1
RETURNING id, page, name, url, img_url, cloud_img, latest_chap, chap_url
`

type UpdateComicParams struct {
	ID         sql.NullInt32
	LatestChap string
	ChapUrl    string
	ImgUrl     sql.NullString
	CloudImg   sql.NullString
}

func (q *Queries) UpdateComic(ctx context.Context, arg UpdateComicParams) (Comic, error) {
	row := q.db.QueryRowContext(ctx, updateComic,
		arg.ID,
		arg.LatestChap,
		arg.ChapUrl,
		arg.ImgUrl,
		arg.CloudImg,
	)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Page,
		&i.Name,
		&i.Url,
		&i.ImgUrl,
		&i.CloudImg,
		&i.LatestChap,
		&i.ChapUrl,
	)
	return i, err
}
