// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapUrl *string `json:"chap-url,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// Comic's latest chapter
	Latest *string `json:"latest,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// ComicPage defines model for ComicPage.
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/comics", wrapper.Comics)
	router.GET("/comics/:id", wrapper.GetComic)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RUTW/TQBD9K6sBiYupXdpD5VtVBIrUQ0S5oR6267G9lb27zI4LUeT/jmYdJ5A4fIjb",
	"eOfzvTfjLRjfB+/QcYRyC9G02Otk3vneGjEC+YDEFtOzaXV4O1AndoXRkA1svYMS7lodGEmJMwPeBIQS",
	"IpN1DYwZ2GohRXqo1ftDvHWMDZIkdJox8pmkN1FNfmWmtkstne7xXNPkW8gJulnIWesGFXtFqCtlEjML",
	"ucu0pHaLpIz7F//0jIalRgpfLw5xbwVuKkcYg3dREBzJI+5kWcY+Ga8JayjhVX6QOt/pnE8iH+bQRHqT",
	"BiP8OljCCsovc9HHURzW1f50ttv1StWelBR0tt6ILPzkWUBb7nBHRHLdrleQwQtSnHIvLwoZwQd0Olgo",
	"4eqiuLgSaJrbBCE/wGpwYSU+IQ/kVCcE+VrtolNJ0hKzqmYl5HlmLxV8VxQTcY7Rpdo6hM6alJc/R2kw",
	"H8a/8ZpUPOV2zI6mfxiMwRjroes2iiYo+hhMWhbdxL0eIkc2M5NvbTX+iZ4pVD3piJXybrq7Xyn6iHy3",
	"2+6gSffISNLyN4dr5VuUgvng5NT3CwQl04DZTwQeX/r4+J+K/MWCn5L+wQ9ud8rqm+VWwIwZXBfXZ044",
	"qspjVM6zwu828hlJxgwi0stMW/olQMscYpnnnTe6a33k8qa4KXIdbP5yCcej3UuU+iw/t4dUCsbH8UcA",
	"AAD//4k2VZmqBQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
