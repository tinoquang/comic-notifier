// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapURL *string `json:"chapURL,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// URL to comic's avatar
	ImgURL *string `json:"imgURL,omitempty"`

	// Comic's latest chapter
	LatestChap *string `json:"latestChap,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// ComicPage defines model for ComicPage.
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// User defines model for User.
type User struct {

	// App scope ID
	Appid *string `json:"appid,omitempty"`

	// Number of comics subscribed
	Comics *int `json:"comics,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// User avatar link
	ProfilePic *string `json:"profile_pic,omitempty"`

	// Page scope ID
	Psid *string `json:"psid,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error

	// (GET /users)
	Users(ctx echo.Context) error

	// (GET /users/{id})
	GetUser(ctx echo.Context, id string) error

	// (GET /users/{id}/comics)
	GetUserComics(ctx echo.Context, id string) error

	// (POST /users/{id}/comics)
	SubscribeComic(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// GetUserComics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserComics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserComics(ctx, id)
	return err
}

// SubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) SubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubscribeComic(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/comics", wrapper.Comics)
	router.GET("/comics/:id", wrapper.GetComic)
	router.GET("/users", wrapper.Users)
	router.GET("/users/:id", wrapper.GetUser)
	router.GET("/users/:id/comics", wrapper.GetUserComics)
	router.POST("/users/:id/comics", wrapper.SubscribeComic)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXTW/jNhD9KwRbYC925GwW6Fa3bYouAgRFkDSnwihoaSxxK5FcziiJG+i/F0PJcixT",
	"qZs0aNEbPeJ8vfc4pB9lZmtnDRhCmT5KzEqoVVie21pnvHDeOvCkIZizUrnb60te5oCZ1460NTKV56Vy",
	"BF40vpIzSRsHMpVIXptCtjOp84gLpxAXP+72a0NQgA8OdRHNc3t9KciKjH3foVB3ipSPZawUARKXNZH5",
	"HYpuj8i62mNRjKphqvLwLeLjVBHxuVIFcOUeVN6VH/Nl+CbSRZFtB4tdfYGMOEbYfhUt4lJzuyGcB3TW",
	"IHcwopg/h5UmqMPiWw9rmcpvkp1ckl4rSSeUXR3Ke7UJhXn42mgPuUx/3QZdtjN5i+APhaWci2nkk3MC",
	"M+tgTyc7vHbF7vv93NQr8MKuu25RYLPi7yvIo3J7Ec/ernUFv7nuoIx0iuB7dYpKm9+jATDWchDKdM+H",
	"jLNJm7WNoHd1IdbWC+7D6PWGlU4rSxxVUwV9i+HTp6sLOZN34LHzPT1ZcI3WgVFOy1SenSxOzlgtisqA",
	"eLIDvwA6zH4N1HgjKtbcQIQMIb3iPRf5FmM2bwUZAr5fLDotGgJDvUAqnQW/5Atygu28+ntSDQfjUK7t",
	"bFT9TZNlgLhuqmojfNeKGjcT2FAFDhKXSzb1yCSPOm//Cp5enyuFkAtrOs73IfoMdN4PDKe8qoHAc8pn",
	"Bqrm38yU3GqbR/BwJmVKvoHZEwDHR6JdvpKRI2bGIeg/2cb001Hcayq5mXYmPyw+TBxOFLkFFMaSgAeN",
	"NE1JgwG047TabR7zcNtb316pYUa+WqRdF08BYctTPI5S6POgfAYK1b69NocJuPzfUfCiUSruS52VIcWT",
	"602QneJoGLXPMhVurmOIyv8jTE29QF400qdBnZpDAS8eQGseXtH5M5POIk24Dln4dWjgfngc7nN4s912",
	"1FXwj5P4tQGkH2y+GfFH8ECJq5QeMQcPqnbhhVESOUyTZAVgihMDlJBvNmDm5JUp59ZU2kBCVs+pVKaY",
	"Z8rNa0vzWptyjvh+fnb23feLyEPogN9uxoTXVvtv3F57+toTj1A9q0FEpxNKaIxqqLRe/wH5a+TGNgR/",
	"t5VG+FMx8FDZTFWlRUo/Lj4uEuV0cncqx71c8i7xC/89ugmhZLts/wwAAP//LnKCCjAOAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
