// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapURL *string `json:"chapURL,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// URL to comic's avatar
	ImgURL *string `json:"imgURL,omitempty"`

	// Comic's latest chapter
	LatestChap *string `json:"latestChap,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// ComicPage defines model for ComicPage.
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// User defines model for User.
type User struct {

	// App scope ID
	Appid *string `json:"appid,omitempty"`

	// Number of comics subscribed
	Comics *int `json:"comics,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// User avatar link
	ProfilePic *string `json:"profile_pic,omitempty"`

	// Page scope ID
	Psid *string `json:"psid,omitempty"`
}

// Limit defines model for limit.
type Limit int64

// Offset defines model for offset.
type Offset int64

// Q defines model for q.
type Q string

// GetUserComicsParams defines parameters for GetUserComics.
type GetUserComicsParams struct {

	// Used to query by name in a list operation.
	Q *Q `json:"q,omitempty"`

	// Used to request the next page in a list operation.
	Offset *Offset `json:"offset,omitempty"`

	// Used to specify the maximum number of records which are returned in the next page.
	Limit *Limit `json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error

	// (GET /users)
	Users(ctx echo.Context) error

	// (GET /users/{id})
	GetUser(ctx echo.Context, id string) error

	// (GET /users/{id}/comics)
	GetUserComics(ctx echo.Context, id string, params GetUserComicsParams) error

	// (POST /users/{id}/comics)
	SubscribeComic(ctx echo.Context, id string) error

	// (DELETE /users/{user_id}/comics/{id})
	UnsubscribeComic(ctx echo.Context, userId string, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// GetUserComics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserComics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserComicsParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserComics(ctx, id, params)
	return err
}

// SubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) SubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubscribeComic(ctx, id)
	return err
}

// UnsubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) UnsubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsubscribeComic(ctx, userId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/comics", wrapper.Comics)
	router.GET("/comics/:id", wrapper.GetComic)
	router.GET("/users", wrapper.Users)
	router.GET("/users/:id", wrapper.GetUser)
	router.GET("/users/:id/comics", wrapper.GetUserComics)
	router.POST("/users/:id/comics", wrapper.SubscribeComic)
	router.DELETE("/users/:user_id/comics/:id", wrapper.UnsubscribeComic)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYb2/bthP+KgR/P6Bv5Mhp0q3Tuy7DigDBECTLq8IoaOlksZNIhjwl8Qx99+EoWfIf",
	"ynGTrgX2KjJ1x3t49/C5U1Y81ZXRChQ6nqy4EVZUgGD9r1JWEukhA5daaVBqxRN+5yBjqJkzkMp8ybAA",
	"VoknWdUVU3U1B8t0ziyk2maOPRYyLZiwwCxgbRVkTCrvo+AJmRELOOERl7TzfQ12ySOuRAU86eJH3KUF",
	"VKIFkou6RJ68m0Y817YSyBMuFf50ziOOSwPtT1iA5U0TcZ3nDg6cwcJ9DQ638RBAwUrpkGkDVpDPGMYu",
	"QBDkkRjvx+H5YGy+ZBTta2DdhxHxAYFDK9WCN4SgtfQ1v9CVTD0VLAVBCX45LYS5u7naR3pRCINgWW3L",
	"/b0jLrOAC4Vgl78FshFxWS2Cce5urighKfm+cUw8CBQ2FLEUCA4J1kjkN461NixtsYd2adMYRu7fBXyI",
	"Ovs+10QozzSRtfBDvpS+kXDBzDb9ip5/gRRpD29+HQRxRaTxwZkFZ7RydIKdEtNr/yQRKv/wfws5T/j/",
	"4kEl4o4rcUuUAYewViw9MLpT0kLGk0/rTWdNRJy2+8QSxoQ48sEY5lJtYIsnQ74GsNt+f/T601owV8/p",
	"/RyyIN1eVGerc1nCZ9NelL2bazt2slKqv4IbuNCRPVHGz7xfcVqSKteB7F1fslxbRudQJNFpIXCuSaZQ",
	"YgndEf2rD9eXPOIPYF3re3oyJYzagBJG8oSfnUxPzogtAguf8XhI/iKkrTde5zuhWheC+y1b0brM1jmm",
	"5TUh/YZvp9OWiwpBYUeQUqbeL/7iKMBqQ9mOp6q/GPt0baId9Ld1moJzeV2Wy65l9arbH8ZXQyxcT3E+",
	"o6UuM/FKZs1z6en4ORck9Vq1Nd9O0UfAi04wNhvzpwOC6nsBVWpoBTLjm3cSbQ2bvWGvIc1eWZIjRGM/",
	"67/rWnXyyB4lFnSaJuLn0/OR2+lYpsExpZHBk3Q4XpPadePMMWRtjXcLcdet/vtU9SL5apa2p9hMCK1s",
	"5uMoih5OykdAj/Y7kLPXwNl/rgYvEtNuqKZdNhocQz1WpF5sD5bK965vVKkonOMhfnzPjzDqxusjLNuP",
	"he/DkLHZ50XNZLyYYwLo60TKl5NqBoUv4kY7HHHto9BcquCxH0u3uXO7NjuqCX1L8sxaY3D4q86WO/VD",
	"eMLYlELuVA6eRGX8bFMgGpfE8RxALU4UYIy2XoKaoBWqmGhVSgUxajnBQqjFJBVmUmmcVFIVE+feTs7O",
	"fv5lGv5UCombn/OaH9E2t/i1RR4muqp6Ep2OMKFWosZCW/k3ZEfTLeLv2rNtm10qBKtEycBabQ+343hF",
	"fz4P+tf3owxKwMBIfqcG1obpumHxesJ28L5W8n7AXPZMmtjgc3CeekZP/H8JwD6sU+m/V/1FS+K41Kko",
	"C+0weT99P42FkfHDKd/l6hVZsT/pw/vW78SbWfNPAAAA///gyFXVgRIAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
