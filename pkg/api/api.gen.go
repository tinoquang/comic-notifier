// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Comic defines model for Comic.
type Comic struct {

	// Chapter url
	ChapURL *string `json:"chapURL,omitempty"`

	// Comic ID
	Id *int `json:"id,omitempty"`

	// URL to comic's avatar
	ImgURL *string `json:"imgURL,omitempty"`

	// Comic's latest chapter
	LatestChap *string `json:"latestChap,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// Page to read comic
	Page *string `json:"page,omitempty"`

	// Comic url
	Url *string `json:"url,omitempty"`
}

// List comic response
type ComicPage struct {
	Comics []Comic `json:"comics"`
}

// User defines model for User.
type User struct {

	// App scope ID
	Appid *string `json:"appid,omitempty"`

	// Number of comics subscribed
	Comics *int `json:"comics,omitempty"`

	// Comic name
	Name *string `json:"name,omitempty"`

	// User avatar link
	ProfilePic *string `json:"profile_pic,omitempty"`

	// Page scope ID
	Psid *string `json:"psid,omitempty"`
}

// Limit defines model for limit.
type Limit int64

// Offset defines model for offset.
type Offset int64

// Q defines model for q.
type Q string

// ComicsParams defines parameters for Comics.
type ComicsParams struct {

	// Used to request the next page in a list operation.
	Offset *Offset `json:"offset,omitempty"`

	// Used to specify the maximum number of records which are returned in the next page.
	Limit *Limit `json:"limit,omitempty"`
}

// GetUserComicsParams defines parameters for GetUserComics.
type GetUserComicsParams struct {

	// Used to query by name in a list operation.
	Q *Q `json:"q,omitempty"`

	// Used to request the next page in a list operation.
	Offset *Offset `json:"offset,omitempty"`

	// Used to specify the maximum number of records which are returned in the next page.
	Limit *Limit `json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /comics)
	Comics(ctx echo.Context, params ComicsParams) error

	// (GET /comics/{id})
	GetComic(ctx echo.Context, id int) error

	// (GET /users)
	Users(ctx echo.Context) error

	// (GET /users/{id})
	GetUser(ctx echo.Context, id string) error

	// (GET /users/{id}/comics)
	GetUserComics(ctx echo.Context, id string, params GetUserComicsParams) error

	// (DELETE /users/{user_id}/comics/{id})
	UnsubscribeComic(ctx echo.Context, userId string, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Comics converts echo context to params.
func (w *ServerInterfaceWrapper) Comics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ComicsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Comics(ctx, params)
	return err
}

// GetComic converts echo context to params.
func (w *ServerInterfaceWrapper) GetComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComic(ctx, id)
	return err
}

// Users converts echo context to params.
func (w *ServerInterfaceWrapper) Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Users(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// GetUserComics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserComics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserComicsParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserComics(ctx, id, params)
	return err
}

// UnsubscribeComic converts echo context to params.
func (w *ServerInterfaceWrapper) UnsubscribeComic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsubscribeComic(ctx, userId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/comics", wrapper.Comics)
	router.GET(baseURL+"/comics/:id", wrapper.GetComic)
	router.GET(baseURL+"/users", wrapper.Users)
	router.GET(baseURL+"/users/:id", wrapper.GetUser)
	router.GET(baseURL+"/users/:id/comics", wrapper.GetUserComics)
	router.DELETE(baseURL+"/users/:user_id/comics/:id", wrapper.UnsubscribeComic)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXUW/bNhD+KwQ3oC9C5K7ZUOitSLHCQDAEyfxUGAUtnSx2EkmTpzSGof8+HKlYjkXF",
	"bpNhw54skzzed3fffSfteK4boxUodDzbcSOsaADB+n+1bCTSQwEut9Kg1IpnfOGgYKiZM5DLcsuwAtaI",
	"B9m0DVNtswLLdMks5NoWjn2rZF4xYYFZwNYqKJhU3kbBAzIj1nDBEy7p5k0LdssTrkQDPOv9J9zlFTQi",
	"AClFWyPPfp0lvNS2EcgzLhX+dskTjlsD4S+swfKuS7guSwfPxGBh04LDp3gIoGC1dMi0ASvIZgpj7yAK",
	"8kyMm2l43hlbbRl5+x5YmzgiPiBwaKVa844QhJO+5le6kbmngiUnKMEv55Uwi9vrMdKrShgEy1pbj+9O",
	"uCwiJuSCzT9GspFw2ayjfha315SQnGzfOCbuBQob81gLBIcEa8LzG8fCGZYH7LFbQhrjyP1exIaoM7a5",
	"IUJ5pokiwI/ZUvom3EUz2+1X9Oor5Eh3+OM3URDXRBrvnFlwRitHERyVmLb9k0Ro/MPPFkqe8Z/SQSXS",
	"nitpIMqAQ1grth4Y9ZS0UPDs8+Olyy4hTtsxsYQxMY58MIa5XBt4wpMhXwPYp3Z/7PUnnGCuXdH+Cooo",
	"3X6ozlaXsoYvJjTKqHNtz05WS/VX9AIXC9kTZTrmccVpSapSR7J3M2eltoziUCTReSVwpUmmUGINfYh+",
	"68PNnCf8HqwLtm8vZoRRG1DCSJ7xdxezi3fEFoGVz3g6JH8d09Zbr/O9UD0Wgvsrg2jNi8ccO3/vMHM+",
	"xzk3HEl7ve2SkyfD9OiWRMhAeQ/5l9kssF0hKOwpWMvcI0u/Ogphd6Cd5zeDb71xQ3TJUX7u2jwH58q2",
	"rrf9UNzr+j5dvt5i7fZNxJe01Oc+3cmiO1WAvgNWgoaJVoFVT4vwCfCql6SjMkxKtp82xIVh2EjqraHr",
	"0bZwOH1GI++lJTlDlsZZ/123qhdg9k1iRdF0Cb+cXU70v2OFBseURgYP0uF0TVrXvzCd0w7h8HEhFv3q",
	"P09VL8MvZmmI4jAhtHKYj7Mo+nxSPgF6tCfI6SX3Zdzci+zyf1eCH1Lr/q2dbjmYoAz1VI2m1DxSKRrt",
	"848JK2RZggWFoR39np+Bd8MMfHlBT8+JzTnD5D88dl5r5EzXfEomfclIH0vS1uflMd3Rz5eBkHt9KKAG",
	"jLyELdQexf69+Ug0hxNnTbHXoF8fxfdy8F8YpyeyyQabZ8fgqQLT5yPY+3jGr3UuavYnfWzd+UO8/9Th",
	"FaLJ0rSmA5V2mL2fvZ+lwsj0/i3vlt3fAQAA///cVgC5mhAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
