// Code generated by sqlc. DO NOT EDIT.
// source: subscriber.sql

package db

import (
	"context"
)

const createSubscriber = `-- name: CreateSubscriber :one
INSERT INTO subscribers
	(user_psid,
	user_appid,
	comic_id) 
	VALUES ($1,$2,$3)
	RETURNING id, user_psid, user_appid, comic_id, created_at
`

type CreateSubscriberParams struct {
	UserPsid  string
	UserAppid string
	ComicID   int32
}

func (q *Queries) CreateSubscriber(ctx context.Context, arg CreateSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, createSubscriber, arg.UserPsid, arg.UserAppid, arg.ComicID)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.UserPsid,
		&i.UserAppid,
		&i.ComicID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriberByAppID = `-- name: DeleteSubscriberByAppID :exec
DELETE FROM subscribers
WHERE user_appid=$1 AND comic_id=$2
`

type DeleteSubscriberByAppIDParams struct {
	UserAppid string
	ComicID   int32
}

func (q *Queries) DeleteSubscriberByAppID(ctx context.Context, arg DeleteSubscriberByAppIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriberByAppID, arg.UserAppid, arg.ComicID)
	return err
}

const deleteSubscriberByPSID = `-- name: DeleteSubscriberByPSID :exec
DELETE FROM subscribers
WHERE user_psid=$1 AND comic_id=$2
`

type DeleteSubscriberByPSIDParams struct {
	UserPsid string
	ComicID  int32
}

func (q *Queries) DeleteSubscriberByPSID(ctx context.Context, arg DeleteSubscriberByPSIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriberByPSID, arg.UserPsid, arg.ComicID)
	return err
}

const getSubscriberByAppIDAndComicID = `-- name: GetSubscriberByAppIDAndComicID :one
SELECT id, user_psid, user_appid, comic_id, created_at FROM subscribers
WHERE user_appid=$1 AND comic_id=$2
`

type GetSubscriberByAppIDAndComicIDParams struct {
	UserAppid string
	ComicID   int32
}

func (q *Queries) GetSubscriberByAppIDAndComicID(ctx context.Context, arg GetSubscriberByAppIDAndComicIDParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSubscriberByAppIDAndComicID, arg.UserAppid, arg.ComicID)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.UserPsid,
		&i.UserAppid,
		&i.ComicID,
		&i.CreatedAt,
	)
	return i, err
}

const getSubscriberByPSIDAndComicID = `-- name: GetSubscriberByPSIDAndComicID :one
SELECT id, user_psid, user_appid, comic_id, created_at FROM subscribers
WHERE user_psid=$1 AND comic_id=$2
`

type GetSubscriberByPSIDAndComicIDParams struct {
	UserPsid string
	ComicID  int32
}

func (q *Queries) GetSubscriberByPSIDAndComicID(ctx context.Context, arg GetSubscriberByPSIDAndComicIDParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSubscriberByPSIDAndComicID, arg.UserPsid, arg.ComicID)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.UserPsid,
		&i.UserAppid,
		&i.ComicID,
		&i.CreatedAt,
	)
	return i, err
}

const listSubscriberByComicID = `-- name: ListSubscriberByComicID :many
SELECT id, user_psid, user_appid, comic_id, created_at FROM subscribers
WHERE subscribers.comic_id=$1
`

func (q *Queries) ListSubscriberByComicID(ctx context.Context, comicID int32) ([]Subscriber, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriberByComicID, comicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscriber{}
	for rows.Next() {
		var i Subscriber
		if err := rows.Scan(
			&i.ID,
			&i.UserPsid,
			&i.UserAppid,
			&i.ComicID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
